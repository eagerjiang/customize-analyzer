<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Logback configuration. See http://logback.qos.ch/manual/index.html -->
<!-- scan:设置true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <springProperty scope="context" name="appHome" source="app.public.home" defaultValue="customize-analyzer"/>
    <springProperty scope="context" name="logType" source="log.type" defaultValue="asyFile"/>
    <springProperty scope="context" name="logLevel" source="log.level" defaultValue="info"/>
    <springProperty scope="context" name="logCharset" source="log.charset" defaultValue="UTF-8"/>
    <springProperty scope="context" name="logPattern" source="log.pattern"
                    defaultValue="[%-5level] [%date{yyyy-MM-dd HH:mm:ss}] [%thread{20}] [%logger{32}] - %msg%n"/>
    <springProperty scope="context" name="logPath" source="log.path" defaultValue="${appHome}/logs"/>
    <springProperty scope="context" name="logFileSize" source="logging.file.max-size" defaultValue="500 MB"/>
    <springProperty scope="context" name="logMaxHistory" source="log.max.history" defaultValue="7"/>
    <!--日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false -->
    <springProperty scope="context" name="logFilePrudent" source="logging.file.prudent" defaultValue="false"/>

    <!--控制台日志输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
    </appender>

    <!--日志文件输出 -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
        <!--日志文件切割配置 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/%d{yyyyMMdd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${logFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>${logMaxHistory}</maxHistory>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <prudent>${logFilePrudent}</prudent>
    </appender>

    <appender name="asyFile" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="file"/>
    </appender>

    <!--必须在appender配置后面，否则找不到appender -->
    <root level="${logLevel}">
        <appender-ref ref="${logType}"/>
        <appender-ref ref="console"/>
    </root>
</configuration>